<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <title>Teacher</title>
    <link rel="stylesheet" href="/stylesheets/index.css" />
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

    <style>
        .question-text,
        .explanation-text {
            white-space: pre-wrap;
            /* CSS property to preserve line breaks and multiple spaces */
        }
    </style>
</head>

<body>
    <nav class="custom-navbar navbar-light header-container">
        <!-- Company Logo -->
        <a class="navbar-brand" href="/teacher/dashboard">
            <img src="/images/logo.png" width="50" height="50" class="d-inline-block align-top" alt="">
        </a>

        <!-- Person Logo and Logout Dropdown -->
        <div class="person-logout d-flex">
            <!-- Custom Dropdown -->
            <div class="custom-dropdown mr-3">

                <button class="logout-button" id="logout-button">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 16 16">
                        <g color="#000000" fill="#ffffff" font-family="sans-serif" font-weight="400"
                            white-space="normal">
                            <path
                                d="M1 7.92a6.94 6.94 0 0 0 .324 2.201A7.004 7.004 0 0 0 8 15a7.004 7.004 0 0 0 6.676-4.879 6.978 6.978 0 0 0-2.662-7.818l-1.145 1.64a4.96 4.96 0 0 1 1.9 5.575A4.99 4.99 0 0 1 8 13a4.99 4.99 0 0 1-4.77-3.482 4.96 4.96 0 0 1 1.9-5.575l-1.144-1.64A6.985 6.985 0 0 0 1 7.92z"
                                overflow="visible"
                                style="line-height:normal;font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-feature-settings:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;text-transform:none;text-orientation:mixed;shape-padding:0;isolation:auto;mix-blend-mode:normal" />
                            <path d="M7 1v7h2V.75z" overflow="visible"
                                style="line-height:normal;font-variant-ligatures:none;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-feature-settings:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;text-transform:none;shape-padding:0;isolation:auto;mix-blend-mode:normal;marker:none" />
                        </g>
                    </svg>
                </button>
            </div>
        </div>
    </nav>

    <!-- Form for creating or editing a question -->
    <div class="login-page">
        <div class="form">
            <h2 id="formHeading">Create Question</h2>
            <form class="custom_form" id="createQuestionForm">
                <input type="hidden" name="question_id">
                <!---- <input type="text" name="question_text" placeholder="Enter your question" required> -->
                <textarea name="question_text" placeholder="Enter your question" cols="135" required></textarea>
                <div class="two_options_grid">
                    <input type="text" name="option1" class="option-input" placeholder="Option 1" required>
                    <input type="text" name="option2" class="option-input" placeholder="Option 2" required>
                </div>
                <div class="two_options_grid">
                    <input type="text" name="option3" class="option-input" placeholder="Option 3" required>
                    <input type="text" name="option4" class="option-input" placeholder="Option 4" required>
                </div>
                <div class="two_options_grid">
                    <select name="correct_answer" class="option_class" id="answerDropdown" required>
                        <option value="">--Select Correct Answer--</option>
                    </select>
                    <input type="number" name="marks" placeholder="Enter marks for this question" required min="1">
                </div>
                <div class="two_options_grid">
                    <select name="course_id" class="option_class" id="courseDropdown" required>
                        <option value="">--Select Course--</option>
                    </select>
                    <select name="exam_id" class="option_class" id="examDropdown" required>
                        <option value="">--Select Section--</option>
                    </select>
                </div>
                <textarea name="explanation_text" placeholder="Add explanation" cols="135" required></textarea>
                <button type="submit">Submit</button>
            </form>
        </div>

        <div class="question_container">
            <div class="question_heading_container">
                <h3 style="text-align: start;">Questions :</h3>
            </div>
            <ol id="questions-list">
                <!-- Questions will be dynamically added here -->
            </ol>
        </div>
    </div>
    <script>
        $(document).ready(function () {

            // Function to update the answer dropdown
            function updateAnswerDropdown() {
                const options = [];
                $('.option-input').each(function () {
                    const optionText = $(this).val();
                    if (optionText.trim() !== '') {
                        options.push({ value: optionText, text: optionText });
                    }
                });

                $('#answerDropdown').empty().append('<option value="">--Select Answer--</option>');
                options.forEach(option => {
                    $('#answerDropdown').append('<option value="' + option.value + '">' + option.text + '</option>');
                });
            }

            // Update the answer dropdown when input fields change
            $('.option-input').on('input', updateAnswerDropdown);

            function renderQuestions(questions) {
                const questionsList = $('#questions-list');

                questions.forEach(question => {
                    const optionsHtml = `
            <p><strong>Options:</strong><br>
                ${question.option1}<br>
                ${question.option2}<br>
                ${question.option3}<br>
                ${question.option4}
            </p>
        `;
                    const questionItem = $(`
            <li>
                <div>
                    <p>${question.question_text.replace(/\n/g, '<br>')}</p>
                    ${optionsHtml}
                    <p><strong>Correct Answer:</strong> ${question.correct_answer}</p>
                    <p><strong>Marks:</strong> ${question.marks}</p>
                    <p><strong>Explanation:</strong> ${question.explanation_text.replace(/\n/g, '<br>')}</p>
                    <button class="edit-btn btn btn-primary" data-id="${question.question_id}">Edit</button>
                    <button class="delete-btn btn btn-danger" data-id="${question.question_id}">Delete</button>
                </div>
            </li>
        `);
                    questionsList.prepend(questionItem); // Prepend new question at the top
                });
            }


            /*
            // Function to render questions
            function renderQuestions(questions) {
                const questionsList = $('#questions-list');
                questionsList.empty(); // Clear previous list

                questions.forEach(question => {
                    const questionItem = $(`
            <li>
                <div>
                    <p>${question.question_text.replace(/\n/g, '<br>')}</p>
                    <p><strong>Options:</strong> ${question.option1}, <br> ${question.option2}, <br> ${question.option3}, <br> ${question.option4}</p>
                    <p><strong>Correct Answer:</strong> ${question.correct_answer}</p>
                    <p><strong>Marks:</strong> ${question.marks}</p>
                    <p><strong>Explanation:</strong> ${question.explanation_text.replace(/\n/g, '<br>')}</p>
                    <p><strong>Course:</strong> ${question.course_name}</p>
                    <p><strong>Section:</strong> ${question.exam_name}</p>
                    <button class="edit-btn btn btn-primary" data-id="${question.question_id}">Edit</button>
                    <button class="delete-btn btn btn-danger" data-id="${question.question_id}">Delete</button>
                </div>
            </li>
        `);
                    questionsList.prepend(questionItem);
                });
            }

      
            function renderQuestions(questions) {
                const questionsList = $('#questions-list');

                questions.forEach(question => {
                    const questionItem = $(`
             <li>
                <div>
                    <p>${question.question_text.replace(/\n/g, '<br>')}</p>
                    <p><strong>Options:</strong> ${question.option1}, ${question.option2}, ${question.option3}, ${question.option4}</p>
                    <p><strong>Correct Answer:</strong> ${question.correct_answer}</p>
                    <p><strong>Marks:</strong> ${question.marks}</p>
                    <p><strong>Explanation:</strong> ${question.explanation_text.replace(/\n/g, '<br>')}</p>
                    <button class="edit-btn btn btn-primary" data-id="${question.question_id}">Edit</button>
                    <button class="delete-btn btn btn-danger" data-id="${question.question_id}">Delete</button>
                </div>
             </li>
               `);
                    questionsList.append(questionItem);
                });
            }
          */
            // Function to fetch and render questions
            function fetchAndRenderQuestions() {
                $.ajax({
                    url: '/question/questions',
                    type: 'GET',
                    success: function (data) {
                        renderQuestions(data);
                    },
                    error: function (error) {
                        console.error('Error fetching questions:', error);
                    }
                });
            }

            // Event listener for form submission
            $('#createQuestionForm').submit(function (event) {
                event.preventDefault();

                const formData = $(this).serialize();
                console.log(formData); // Log formData to verify content
                const questionId = $('input[name="question_id"]').val();

                const ajaxOptions = {
                    url: questionId ? `/question/questions/${questionId}` : '/question/questions',
                    type: questionId ? 'PUT' : 'POST',
                    data: formData,
                    success: function () {
                        alert('Question saved successfully');
                        location.reload();
                        fetchAndRenderQuestions();
                        $('#createQuestionForm')[0].reset();
                        $('#formHeading').text('Create Question');
                        $('#answerDropdown').empty().append('<option value="">--Select Correct Answer--</option>');
                        updateAnswerDropdown();
                    },
                    error: function (error) {
                        console.error('Error saving question:', error);
                    }
                };

                $.ajax(ajaxOptions);
            });

            // Edit button click event
            $(document).on('click', '.edit-btn', function () {
                const questionId = $(this).data('id');
                $.ajax({
                    url: `/question/questions/${questionId}`,
                    type: 'GET',
                    success: function (data) {
                        // Setting the values of the input fields
                        $('input[name="question_id"]').val(data.question_id);
                        $('textarea[name="question_text"]').val(data.question_text);
                        $('input[name="option1"]').val(data.option1);
                        $('input[name="option2"]').val(data.option2);
                        $('input[name="option3"]').val(data.option3);
                        $('input[name="option4"]').val(data.option4);
                        $('textarea[name="explanation_text"]').val(data.explanation_text);

                        // Adding placeholders
                        $('textarea[name="question_text"]').attr('placeholder', 'Enter the question text');
                        $('input[name="option1"]').attr('placeholder', 'Enter option 1');
                        $('input[name="option2"]').attr('placeholder', 'Enter option 2');
                        $('input[name="option3"]').attr('placeholder', 'Enter option 3');
                        $('input[name="option4"]').attr('placeholder', 'Enter option 4');
                        $('input[name="marks"]').attr('placeholder', 'Enter the marks for the question');
                        $('textarea[name="explanation_text"]').attr('placeholder', 'Add explanation');

                        $('#answerDropdown').empty().append(`
                    <option value="${data.option1}">${data.option1}</option>
                    <option value="${data.option2}">${data.option2}</option>
                    <option value="${data.option3}">${data.option3}</option>
                    <option value="${data.option4}">${data.option4}</option>
                `).val(data.correct_answer);

                        // Setting other fields
                        $('input[name="marks"]').val(data.marks);
                        $('#courseDropdown').val(data.course_id).trigger('change');
                        $('#examDropdown').val(data.exam_id).trigger('change');
                        $('#formHeading').text('Edit Question');
                    },
                    error: function (error) {
                        console.error('Error fetching question:', error);
                    }
                });
            });


            // Delete button click event
            $(document).on('click', '.delete-btn', function () {
                const questionId = $(this).data('id');
                if (confirm('Are you sure you want to delete this question?')) {
                    $.ajax({
                        url: `/question/questions/${questionId}`,
                        type: 'DELETE',
                        success: function () {
                            alert('Question deleted successfully');
                            location.reload();
                            fetchAndRenderQuestions();
                        },
                        error: function (error) {
                            console.error('Error deleting question:', error);
                        }
                    });
                }
            });

            // Fetch and populate dropdowns
            function populateDropdowns() {
                $.ajax({
                    url: '/course/courses',
                    type: 'GET',
                    success: function (courses) {
                        const courseDropdown = $('#courseDropdown');
                        courseDropdown.empty().append('<option value="">--Select Course--</option>');
                        courses.forEach(course => {
                            courseDropdown.append(`<option value="${course.course_id}">${course.course_name}</option>`);
                        });
                    },
                    error: function (error) {
                        console.error('Error fetching courses:', error);
                    }
                });

                $('#courseDropdown').change(function () {
                    const courseId = $(this).val();
                    if (courseId) {
                        $.ajax({
                            url: `/exam/courses/${courseId}/exams`,
                            type: 'GET',
                            success: function (exams) {
                                const examDropdown = $('#examDropdown');
                                examDropdown.empty().append('<option value="">--Select Section--</option>');
                                exams.forEach(exam => {
                                    examDropdown.append(`<option value="${exam.exam_id}">${exam.exam_name}</option>`);
                                });
                            },
                            error: function (error) {
                                console.error('Error fetching exams:', error);
                            }
                        });
                    }
                });
            }

            populateDropdowns();
            fetchAndRenderQuestions();

            document.getElementById('logout-button').addEventListener('click', function () {
                fetch('/users/logout', {
                    method: 'POST',
                    credentials: 'same-origin' // Include cookies with the request
                })
                    .then(response => {
                        if (response.ok) {
                            // Redirect to the login page
                            window.location.href = '/users/teacher/login';
                        } else {
                            alert('Failed to log out');
                            location.reload();
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to log out');
                        location.reload();
                    });
            });

        });
    </script>

</body>

</html>